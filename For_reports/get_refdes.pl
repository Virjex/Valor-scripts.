#!perl -w


use warnings;
use Valor;
use IO::File;
use Tk;
use vars qw( $V $JOB $STEP $MW %SETS $x $y $layer $measurement $c_layer );
use subs qw ( valor pop_up );
#####################################################
#													#
#				Main Var decleration				#
#													#
#####################################################
our $V = new Valor;
$JOB = $ENV{JOB};
$STEP = $ENV{STEP};
my @refdes4print;

$V->VOF;
$V->COM("delete_layer,layer=temp");
create_layers("temp");
$V->VON;

#Getting the info from the file dfm_report_sync that gets generated by the DFM report excle.
#& setting it up with in a hash with the Layer refernce + mesurment to be used to get the rnage of the issue + and X cords Y Cords (the excle file generated cords for the zoom funtion so hens x1 x2 y1 y2) 
# the fine name is the path to the dfm report sync file. it always bening saved to that location by the excle script.
my $filename = 'C:\MentorGraphics\Valor\vNPI_TMP\dfm_report_sync.txt';

if( !-e $filename){
	pop_up "Coordinates were not received to Valor <br>
		go to the DFM report -> right click <b>while Coordinates are selected </b> -> \" Valor NPI - Add to Script \" ";
	exit(0);
}

my $fakeRefDes = 1;
my %results;
my $set_count = 0;
open(my $fh, '<', $filename) or pop_up("$filename' $!");
check_for_temp_layer();

while (my $line = <$fh>) {
	#regex exprestion to set up the first key that will hold the sets.
	#first set porpes is to hold information for each alert and to keep the hash orginazed.
	if ($line =~ /Location no. (\d+)/) {
		$set_count++;
	}
	elsif ($set_count) {
		if ($line =~ /x1=(-?[\d\.]+),y1=(-?[\d\.]+),x2=(-?[\d\.]+),y2=(-?[\d\.]+)/) {
			#assinging the X/Y cords it thier coresponding keys with in the set of the hash
			#using regex to find them and return the mesurments
			my ($x1, $y1, $x2, $y2) = ($1, $2, $3, $4);
			
			$results{$set_count}{x1} = $x1;
			$results{$set_count}{y1} = $y1;
			$results{$set_count}{x2} = $x2;
			$results{$set_count}{y2} = $y2;

		}
		elsif ($line =~ /display_layer, Name = (.*?),/) {
			my $layer = $1;
			if ($layer !~ /top|bot/) {
				pop_up "$layer is wrong layer was loaded\n exisitng script";
				exit(0);
			}
			$results{$set_count}{layer} = $layer;
		}
		elsif ($line =~ /Current Measurement: ([\d\.]+)/) {
			my $measurement = $1;
			$results{$set_count}{measurement} = $measurement;
		}
	}
}
close($fh);

clearAndReset();

for(my $i = 1; $i <= keys %results; $i++){
	SeleteRadLayer();
	
	$x = (($results{$i}{x2} - $results{$i}{x1}) / 2) + $results{$i}{x1};
	$y = (($results{$i}{y2} - $results{$i}{y1}) / 2) + $results{$i}{y1};
	
	if ($results{$i}{measurement}){
		$measrenent = $results{$i}{measurement};
	} else {
		$measrenent = 10;
	}
	
	#pop_up $measrenent;
	
	$layer = $results{$i}{layer};
	
	createRad($x,$y,$measrenent+0.001);
	
	my $c_layer = get_comoponent_layer($layer);

	###
	#	Strating to crwal up the layers using refernce selection of Valor. stating from the problomatic layer 
	#	i.e. smbot. getting the problomatic pads and selecting the component that using said pad. 
	###

	valor("display_layer,name=$layer,display=yes,number=2",
		,"work_layer,name=$layer"
		#,"zoom_area,x1=$results{$i}{x1},y1=$results{$i}{y1},x2=$results{$i}{x2},y2=$results{$i}{y2}"
		);
	select_using_temp($layer);
	
	valor("affected_layer,name=$c_layer,mode=single,affected=yes",
		"filter_comp_set,filter_name=popup,update_popup=no,cpn_names=*",
		"sel_ref_feat,layers=$layer,use=select,mode=touch,f_types=pad,polarity=positive");

	$V->DO_INFO("-t eda -e $JOB/$STEP -m script -d COMP -p refdes -o select");		
	my $refz = ($V->{doinfo}{gCOMPrefdes});
	if (${$refz}[1]){
		$refz = check_for_shield($refz,$c_layer);
		my $listR = return_list($refz);
		my $test = get_user_input($c_layer, "$listR Multipel RefRes were Found",$listR );
		push(@refdes4print, "$test");
	} elsif (!${$refz}[0]){
		#attempt to get the refdes from the other side of the board. and sking user to input the refdes.
		select_using_temp($layer);
		valor("affected_layer,name=${\switch_compsides($c_layer)},mode=single,affected=yes"
			,"filter_comp_set,filter_name=popup,update_popup=no,cpn_names=*"
			,"sel_ref_feat,layers=$layer,use=select,mode=touch,f_types=pad,polarity=positive");
		$V->DO_INFO("-t eda -e $JOB/$STEP -m script -d COMP -p refdes -o select");
		$refz = $V->{doinfo}{gCOMPrefdes} ;
		valor ("zoom_selected"
				,"display_layer,name=temp,display=yes,number=13"
				,"display_layer,name=${\switch_compsides($c_layer)},display=yes,number=1"
				,"display_layer,name=$layer,display=yes,number=4"
			);
		if (${$refz}[1]){
			$refz = check_for_shield($refz,switch_compsides($c_layer));
			my $listR = return_list($refz);
			my $test = get_user_input($c_layer, "$listR Multipel RefRes were Found",$listR);
			push(@refdes4print, "$test");
		} else {
			my $test = get_user_input($c_layer, ${$refz}[0] ? "${$refz}[0] was found on the other side of the board\nchange if needed" : 
			"no refdes as found on the other side and the $layer 's side of the board\nwrite if there is a refdes",${$refz}[0]) || "No refdes";
			$test = "flx".$fakeRefDes++ if $test eq "";
			push(@refdes4print, "$test");
			}
	} else {
		$refz = check_for_shield(@$refz,$c_layer);
		${$refz}[0] ? push (@refdes4print,${$refz}[0]) : push (@refdes4print,"flx".$fakeRefDes++);
	}
	clear_temp();
	
}

$filename = 'C:\MentorGraphics\Valor\vNPI_TMP\ref_des_grabber.txt';
open($fh, '>',$filename) or die "Clound not open file.";
foreach (@refdes4print){
	print $fh "$_\n";
}
close($fh);

valor("delete_layer,layer=temp");
system(1,"notepad.exe $filename");


sub get_select_count{
	valor "get_select_count"; 
	return $V->{COMANS};
}

sub check_for_shield{
	my @ref_list = shift;
	my $side = shift eq "comp_+_top" ? "Top" : "Bottom";
	my @results;
	$V->DO_INFO("-t eda -e $JOB/$STEP -m script -d COMP -p desc1 -o select");
	for (my $i = 0; $i < scalar @ref_list ; $i++){
		$V->DO_INFO("-t comp -e $JOB/$STEP/$side/$ref_list[$i] -m script -d DESC1 -u no");
		my $des = ($V->{doinfo}{gDESC1});
		if (!($des =~ /SHIELD/gi)){
			push(@results,"$ref_list[$i]");
		}
	}
	return \@results;
}

sub return_list{
	my ($ref_arry) = @_;
	return join(", ",@$ref_arry);
}

sub select_using_temp{
	my $layer = shift;
	#filter setup to avoid false selections such as large GND planes
	#this part is for using the Bottom/Top copper layers.
	#as this is a refdes script. a .toe_print filter has been choosen to filter out between all the other types of pads.
	if ($layer eq "top" || $layer eq "bottom"){
		valor("filter_adv_set,update_popup=no,select=yes"
				,"filter_atr_set,attribute=.pad_usage,entity=feature,condition=yes,option=toeprint");
	} 
	#check if the sm will work using this mathod. 
	valor("sel_ref_feat,layers=temp,use=filter,mode=touch,f_types=pad,polarity=positive"
			,"filter_reset"
			,"display_layer,name=temp,display=no");
}


sub valor{
	while ($_[0] or $_){
		$V->COM(shift);
	}
}

sub pop_up{
	$V->PAUSE(shift);
}

sub switch_compsides{	
	if (shift eq "comp_+_top"){
		return "comp_+_bot";
	} else {
		return "comp_+_top";
	}
}

sub create_layers{
	$V->DO_INFO("-t matrix -e $JOB/matrix -d NUM_LAYERS");
	my $num = ($V->{doinfo}{gNUM_LAYERS});
	$num =~ s/\'//g;
	$num ++;
		while ($_[0] or $_){
			valor("matrix_insert_row,job=$JOB,matrix=matrix,row=$num",
			"matrix_refresh,job=$JOB,matrix=matrix",	
			"matrix_add_layer,job=$JOB,matrix=matrix,layer=".shift.",row=$num,context=misc,type=document,polarity=positive,sub_type=");
			$num ++;
	}
}

sub clear_temp{
	$V->VOF;
	
	$V->COM("delete_layer,layer=temp");
	create_layers("temp");
	

	clearAndReset();
	SeleteRadLayer();
	valor("sel_delete");
	clearAndReset();
	$V->VON;
}

sub get_comoponent_layer{
	my $layer = shift;
	my $result;
	if ($layer=~ /top/){
		$result = "comp_+_top";
	} else {

		$result = "comp_+_bot";
	}
	return $result;
}

sub check_for_temp_layer{
	$V->VOF;
	valor("display_layer,name=temp,display=yes,number=1");
	my $states = $V->{STATUS};
	if ( $states != 0 ) {
		valor("create_layer,layer=temp,context=misc,type=signal,polarity=positive");
	}
	$V->VON;
}


sub clearAndReset {
	# Clears selects, highlights, layers, and resets filters

	$V->VOF;
		valor("zoom_home"
		,"clear_highlight"
		,"sel_clear_feat"
		,"filter_reset,filter_name=popup"
		,"filter_atr_reset"
		,"cur_atr_reset"
		,"affected_layer,name=,mode=all,affected=no"
		,"clear_layers"
		,"zoom_refresh");
	$V->VON;
}

sub createRad{
	my $x = shift;
	my $y = shift;
	my $rad = "r".shift;
	valor("add_pad,x=$x,y=$y,symbol=$rad,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1");	
}

sub SeleteRadLayer {
	$V->VON;
		valor("display_layer,name=temp,display=yes,number=1");
		valor("work_layer,name=temp");
	$V->VOF;
}

sub clearTempLayer{
	SeleteRadLayer();
	valor("sel_delete");
}



#with time this will become a disconected
sub get_user_input {
    my $input = "";
	my $clayer = shift;

	valor("zoom_selected"
		,"display_layer,name=temp,display=yes,number=9");
	


    my $mw = MainWindow->new;
    $mw->title("RefDes GUI");
	$mw->geometry("+200+200");
	$mw->raise();
	$mw->focus();

    my $example_text = $mw->Label(
        -text => shift ,
        -font => "Helvetica 12 bold",
    )->pack(
        -pady => 20,
    );
	$input = shift || "";
    my $input_box = $mw->Entry(
        -width => 10,
		-font => "Helvetica 12 bold",
		-textvariable => \$input,
		-justify => 'center',
    )->pack();
	
    my $stop_button = $mw->Button(
        -text => "Stop",
		-width => 10,
		-height => 2,
        -command => sub { exit },
    )->pack(
        -side => "right",
        -padx => 5,
        -pady => 5,

    );

    my $continue_button = $mw->Button(
        -text => "Continue",
		-relief	=> 'raised',
		-width => 10,
		-height => 2,
        -command => sub {
            $input = $input_box->get(); # Get the text input from the text box
            $mw->destroy;
        },
    )->pack(
        -side => "left",
        -padx => 10,
        -pady => 10,

    );
	

    my $move_button = $mw->Button(
        -text => "Switch layers",
		-relief	=> 'raised',
		-width => 10,
		-height => 2,
        -command => sub {
							valor ("display_layer,name=$clayer,display=yes,number=1");
							$clayer =  switch_compsides($clayer);
		}
    )->pack(
        -side => "left",
        -padx => 5,
        -pady => 10,

    );
	
	my $zoom_button = $mw->Button(
        -text => "Zoom out",
		-relief	=> 'raised',
		-width => 10,
		-height => 2,
        -command => sub {
							valor ("zoom_out");
						},
    )->pack(
        -side => "left",
        -padx => 5,
        -pady => 10,

    );
		my $zoom_button = $mw->Button(
        -text => "Zoom in",
		-relief	=> 'raised',
		-width => 10,
		-height => 2,
        -command => sub {
							valor ("zoom_in");
						},
    )->pack(
        -side => "left",
        -padx => 5,
        -pady => 10,

    );
    MainLoop;

    return $input;
}